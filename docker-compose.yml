services:
  # PostgreSQL Database（僅內部使用，不對外開埠）
  db:
    image: postgres:15-alpine
    container_name: r1l_rtm_v3_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: requirement_db
    volumes:
      - postgres_data_v3:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rtm_network_v3
    restart: unless-stopped

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile.dev
    container_name: r1l_rtm_v3_backend
    environment:
      # 內部用 db:5432 連線
      DATABASE_URL: postgresql://postgres:postgres@db:5432/requirement_db
      # CORS：允許的來源
      CORS_ORIGINS: http://localhost,http://127.0.0.1,http://172.30.227.55
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()\" || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./backend:/app
      - ./data:/data
    networks:
      - rtm_network_v3
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped

  # Frontend (Vue.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile.dev
    container_name: r1l_rtm_v3_frontend
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:3000 || wget --no-verbose --tries=1 --spider http://$(hostname -i):3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - rtm_network_v3
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: npm run dev
    restart: unless-stopped

  # Reverse Proxy（唯一對外公開 80）
  reverse-proxy:
    image: nginx:alpine
    container_name: r1l_rtm_v3_reverse_proxy
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:80/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./reverse-proxy/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "55688:80"
    networks:
      - rtm_network_v3
    restart: unless-stopped

volumes:
  postgres_data_v3:

networks:
  rtm_network_v3:
    driver: bridge
